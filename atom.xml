<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>追途的个人博客</title>
  
  <subtitle>herelookingatyoukid@gmail.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hereislookingatyoukid.xyz/"/>
  <updated>2019-05-20T08:56:09.052Z</updated>
  <id>http://hereislookingatyoukid.xyz/</id>
  
  <author>
    <name>追途</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>探究BitmapFactory.decodeResource</title>
    <link href="http://hereislookingatyoukid.xyz/2019/05/20/%E6%8E%A2%E7%A9%B6BitmapFactory-decodeResource/"/>
    <id>http://hereislookingatyoukid.xyz/2019/05/20/探究BitmapFactory-decodeResource/</id>
    <published>2019-05-20T08:53:45.000Z</published>
    <updated>2019-05-20T08:56:09.052Z</updated>
    
    <content type="html"><![CDATA[<p>1.基础</p><p>关于静态类 BitmapFactory.Options</p><p>inDensity : 当前bitmap的像素密度。<br>inTargetDensity : 目标bitmap的像素密度。<br>inScreenDensity :  屏幕的像素密度。</p><p>关于 TypedValue 类<br>主要被 android.content.res.Resources 类使用，动态的一中数据类型。</p><p>2.从 BitmapFactory.decodeResource 开始<br> 调用静态方法 BitmapFactory.decodeResource ，加载诸如 /main/res/drawable-xxhdpi 文件夹下的资源 会间接调用 decodeResource(Resources res, int id, Options opts) 方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public static Bitmap decodeResourceStream(@Nullable Resources res, @Nullable TypedValue value,</span><br><span class="line">        @Nullable InputStream is, @Nullable Rect pad, @Nullable Options opts) &#123;</span><br><span class="line">    validate(opts);</span><br><span class="line">    if (opts == null) &#123;</span><br><span class="line">    // new出的opts的inDensity,inTargetDensity,inScreenDensity 都为 0</span><br><span class="line">        opts = new Options();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (opts.inDensity == 0 &amp;&amp; value != null) &#123;</span><br><span class="line">        final int density = value.density;</span><br><span class="line">        if (density == TypedValue.DENSITY_DEFAULT) &#123;</span><br><span class="line">            opts.inDensity = DisplayMetrics.DENSITY_DEFAULT;</span><br><span class="line">        &#125; else if (density != TypedValue.DENSITY_NONE) &#123;</span><br><span class="line">            opts.inDensity = density;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (opts.inTargetDensity == 0 &amp;&amp; res != null) &#123;</span><br><span class="line">        opts.inTargetDensity = res.getDisplayMetrics().densityDpi;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return decodeStream(is, pad, opts);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过类型为 TypedValue 的具体对象 value 来初始化 opts 的 inDensity 和 inTargetDensity。</strong><br> 而后 调用 decodeStream 方法，跟进该方法 进入decodeStreamInternal 方法最后发现调用了nativeDecodeStream。<br> 通过<a href="http://androidxref.com/9.0.0_r3/xref/frameworks/base/core/jni/android/graphics/BitmapFactory.cpp" target="_blank" rel="noopener">androidxref</a> 检索到对应的native方法 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">static jobject nativeDecodeStream(JNIEnv* env, jobject clazz, jobject is, jbyteArray storage,</span><br><span class="line">        jobject padding, jobject options) &#123;</span><br><span class="line"></span><br><span class="line">    jobject bitmap = NULL;</span><br><span class="line">    std::unique_ptr&lt;SkStream&gt; stream(CreateJavaInputStreamAdaptor(env, is, storage));</span><br><span class="line"></span><br><span class="line">    if (stream.get()) &#123;</span><br><span class="line">        std::unique_ptr&lt;SkStreamRewindable&gt; bufferedStream(</span><br><span class="line">                SkFrontBufferedStream::Make(std::move(stream), SkCodec::MinBufferedBytesNeeded()));</span><br><span class="line">        SkASSERT(bufferedStream.get() != NULL);</span><br><span class="line">        bitmap = doDecode(env, std::move(bufferedStream), padding, options);</span><br><span class="line">    &#125;</span><br><span class="line">    return bitmap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入核心方法 doDecode</p><p>我们可以在 doDecode 方法中发现 最开始 Options 对象的三个字段 inDensity,inTargetDensity,inScreenDensity 直接作用于此，并对scale产生影响。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (env-&gt;GetBooleanField(options, gOptions_scaledFieldID)) &#123;</span><br><span class="line">    const int density = env-&gt;GetIntField(options, gOptions_densityFieldID);</span><br><span class="line">    const int targetDensity = env-&gt;GetIntField(options, gOptions_targetDensityFieldID);</span><br><span class="line">    const int screenDensity = env-&gt;GetIntField(options, gOptions_screenDensityFieldID);</span><br><span class="line">    if (density != 0 &amp;&amp; targetDensity != 0 &amp;&amp; density != screenDensity) &#123;</span><br><span class="line">        scale = (float) targetDensity / density;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这三个字段最后作用于 doDecode 方法的 scale 大致也就能猜个七八。继续看 doDecode 方法之后对于 scale 的处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Scale is necessary due to density differences.</span><br><span class="line">if (scale != 1.0f) &#123;</span><br><span class="line">    willScale = true;</span><br><span class="line">    scaledWidth = static_cast&lt;int&gt;(scaledWidth * scale + 0.5f);</span><br><span class="line">    scaledHeight = static_cast&lt;int&gt;(scaledHeight * scale + 0.5f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>scaledWidth 与 scaledHeight 后续作用于 outputBitmap 对象进而返回 bitmap。<br><strong>:在通过BitmapFactory.decodeResource 获取 /res/drawable 中的内容 Options 的 三个字段会决定native中的scale值的大小，最后会影响图片的宽高导致加载到内存的大小也会有改变。</strong><br>scale关键赋值操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (density != 0 &amp;&amp; targetDensity != 0 &amp;&amp; density != screenDensity) &#123;</span><br><span class="line">       scale = (float) targetDensity / density;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>3.demo测试<br><a href="https://github.com/caizhixing/BitmapScaleViaOptionsDemo" target="_blank" rel="noopener">地址</a><br>同一张图片（896*896）修改文件名放到 drawable-ldpi,drawable-hdpi,drwaable-xxhdpi,drawable-xxshdpi文件夹下，直接调用静态方法 BtmapFactory.ecodeResource(Resources res, int id)</p><table><thead><tr><th style="text-align:center">type</th><th style="text-align:center">getWidth()</th><th style="text-align:center">getHeight()</th><th style="text-align:center">getByteCount()</th></tr></thead><tbody><tr><td style="text-align:center">drawable-ldpi</td><td style="text-align:center">3285</td><td style="text-align:center">3285</td><td style="text-align:center">43164900</td></tr><tr><td style="text-align:center">drawable-hdpi</td><td style="text-align:center">1643</td><td style="text-align:center">1643</td><td style="text-align:center">10797796</td></tr><tr><td style="text-align:center">drawable-xxhdpi</td><td style="text-align:center">821</td><td style="text-align:center">821</td><td style="text-align:center">2696164</td></tr><tr><td style="text-align:center">drawable-xxxhdpi</td><td style="text-align:center">616</td><td style="text-align:center">616</td><td style="text-align:center">1517824</td></tr></tbody></table><p>修改options 中影响 scale 的参数 inDensity 和 inTargetDensity（inScreenDensity仍为默认值）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BitmapFactory.Options o = new BitmapFactory.Options();</span><br><span class="line">       o.inDensity = getResources().getDisplayMetrics().densityDpi;</span><br><span class="line">       o.inTargetDensity = getResources().getDisplayMetrics().densityDpi; BitmapFactory.decodeResource(getResources(),R.drawable.pic_ldpi,o)</span><br></pre></td></tr></table></figure></p><table><thead><tr><th style="text-align:center">type</th><th style="text-align:center">getWidth()</th><th style="text-align:center">getHeight()</th><th style="text-align:center">getByteCount()</th></tr></thead><tbody><tr><td style="text-align:center">drawable-ldpi(change options)</td><td style="text-align:center">896</td><td style="text-align:center">896</td><td style="text-align:center">3211264</td></tr></tbody></table><p>总结：通过表一可知 drawable-xxx 影响图片的 缩放 直接影响着性能。通过表二可知动态的修改 options 参数可以调整你想要的 scale。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.基础&lt;/p&gt;
&lt;p&gt;关于静态类 BitmapFactory.Options&lt;/p&gt;
&lt;p&gt;inDensity : 当前bitmap的像素密度。&lt;br&gt;inTargetDensity : 目标bitmap的像素密度。&lt;br&gt;inScreenDensity :  屏幕的像素
      
    
    </summary>
    
    
      <category term="Android" scheme="http://hereislookingatyoukid.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>android 视图相关</title>
    <link href="http://hereislookingatyoukid.xyz/2019/04/17/android%20%E8%A7%86%E5%9B%BE%E7%9B%B8%E5%85%B3/"/>
    <id>http://hereislookingatyoukid.xyz/2019/04/17/android 视图相关/</id>
    <published>2019-04-17T05:19:30.000Z</published>
    <updated>2019-04-19T06:02:21.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android视图相关"><a href="#Android视图相关" class="headerlink" title="Android视图相关"></a>Android视图相关</h2><p>推荐3星：<a href="https://hencoder.com/" target="_blank" rel="noopener">扔物线主站</a><br>推荐4星：<a href="http://www.gcssloop.com/timeline" target="_blank" rel="noopener">GcsSloop的自定义view教程</a><br>推荐4星：Mastering the Android Touch System（这是我目前看过讲解最好的Android触摸反馈相关的视频） <a href="https://www.bilibili.com/video/av24566744?from=search&amp;seid=4271534907810078252" target="_blank" rel="noopener">B站视频</a> <a href="https://www.youtube.com/watch?v=EZAoJU-nUyI" target="_blank" rel="noopener">Youtube源地址</a><br>推荐5星：<a href="https://github.com/devunwired/custom-touch-examples" target="_blank" rel="noopener">Mastering the Android Touch System 示例源码</a><br>推荐5星：<a href="https://github.com/caizhixing/Source/blob/master/Mastering%20the%20Androiid%20Touch%20System_Daves_Slides.pdf" target="_blank" rel="noopener">Mastering the Android Touch System PPT</a><br><a href="https://github.com/sunnyxibei/HenCoderPractice" target="_blank" rel="noopener">仿写酷界面 获奖作品1</a><br><a href="https://github.com/sickworm/MISportsConnectWidget" target="_blank" rel="noopener">仿写酷界面 获奖作品2</a><br><a href="https://github.com/totond/BooheeRuler" target="_blank" rel="noopener">仿写酷界面 获奖作品3</a><br><a href="https://github.com/arvinljw/ThumbUpSample" target="_blank" rel="noopener">仿写酷界面 获奖作品4</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Android视图相关&quot;&gt;&lt;a href=&quot;#Android视图相关&quot; class=&quot;headerlink&quot; title=&quot;Android视图相关&quot;&gt;&lt;/a&gt;Android视图相关&lt;/h2&gt;&lt;p&gt;推荐3星：&lt;a href=&quot;https://hencoder.com
      
    
    </summary>
    
      <category term="Android" scheme="http://hereislookingatyoukid.xyz/categories/Android/"/>
    
    
      <category term="View" scheme="http://hereislookingatyoukid.xyz/tags/View/"/>
    
  </entry>
  
</feed>
